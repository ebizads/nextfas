generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expiresAt         Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userArchiveId     Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        Int
  expires       DateTime
  userArchiveId Int?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  recovery_email String?
  username       String?        @unique
  password       String
  user_type      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  emailVerified  DateTime?
  image          String?
  deleted        Boolean        @default(false)
  deletedAt      DateTime?
  lockedUntil    DateTime?
  attempts       Int            @default(0)
  attemptDate    DateTime?
  oldPassword    String[]
  firstLogin     Boolean?
  lockedAt       DateTime?
  lockedReason   String?
  inactivityDate DateTime?
  validatedDate  DateTime?
  superviseeId   Int?
  teamId         Int?
  passwordAge    DateTime?
  hired_date     DateTime?
  position       String?
  user_Id        String?        @unique
  accounts       Account[]
  address        Address?
  created_assets Asset[]
  profile        Profile?
  sessions       Session[]
  Usersupervisee Team?          @relation("Usersupervisors", fields: [superviseeId], references: [id])
  Userteam       Team?          @relation("Usermembers", fields: [teamId], references: [id])
  ticketTable    ticketTable[]
  validateTable  validateTable?
}

model UserArchive {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String?
  recovery_email String?
  username       String?
  user_type      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deleted        Boolean   @default(false)
  deletedAt      DateTime?
  hired_date     DateTime?
  old_id         Int       @unique
  position       String?
  teamId         Int?
  user_Id        String?   @unique
}

model validateTable {
  id             Int       @id @default(autoincrement())
  certificate    String?
  validationDate DateTime?
  userId         Int?      @unique
  userArchiveId  Int?      @unique
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Employee {
  id           Int       @id @default(autoincrement())
  name         String?
  hired_date   DateTime?
  position     String?
  employee_id  String?   @unique
  email        String?   @unique
  locked       Boolean   @default(false)
  lockedAt     DateTime?
  lockedReason String?
  lockedUntil  DateTime?
  attempts     Int       @default(0)
  teamId       Int?
  superviseeId Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deleted      Boolean   @default(false)
  deletedAt    DateTime?
  address      Address?
  owned_assets Asset[]
  supervisee   Team?     @relation("supervisors", fields: [superviseeId], references: [id])
  team         Team?     @relation("members", fields: [teamId], references: [id])
  profile      Profile?
}

model Profile {
  id            Int       @id @default(autoincrement())
  first_name    String
  middle_name   String?
  last_name     String
  suffix        String?
  gender        String?
  image         String?
  date_of_birth DateTime?
  userId        Int?      @unique
  employeeId    Int?      @unique
  phone_no      String?
  employee      Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id         Int       @id @default(autoincrement())
  street     String?
  city       String?
  state      String?
  zip        String?
  country    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deleted    Boolean   @default(false)
  deletedAt  DateTime?
  userId     Int?      @unique
  companyId  Int?      @unique
  vendorId   Int?      @unique
  employeeId Int?      @unique
  company    Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendor     Vendor?   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Location {
  id          Int          @id @default(autoincrement())
  floor       String?
  room        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  deleted     Boolean      @default(false)
  departments Department[]
}

model Model {
  id         Int            @id @default(autoincrement())
  name       String
  brand      String?
  number     String?
  classId    Int?
  typeId     Int?
  categoryId Int?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?
  deleted    Boolean        @default(false)
  assets     Asset?
  category   AssetCategory? @relation(fields: [categoryId], references: [id])
  class      AssetClass?    @relation(fields: [classId], references: [id])
  type       AssetType?     @relation(fields: [typeId], references: [id])
}

model AssetClass {
  id         Int             @id @default(autoincrement())
  name       String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  deletedAt  DateTime?
  deleted    Boolean         @default(false)
  categories AssetCategory[]
  model      Model[]
}

model AssetCategory {
  id        Int         @id @default(autoincrement())
  name      String
  classId   Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
  deleted   Boolean     @default(false)
  class     AssetClass? @relation(fields: [classId], references: [id])
  types     AssetType[]
  model     Model[]
}

model AssetType {
  id         Int            @id @default(autoincrement())
  name       String
  categoryId Int?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?
  deleted    Boolean        @default(false)
  category   AssetCategory? @relation(fields: [categoryId], references: [id])
  model      Model[]
}

model AssetManagement {
  id                    Int       @id @default(autoincrement())
  currency              String?
  original_cost         Float?
  current_cost          Float?
  residual_value        Float?
  purchase_date         DateTime?
  depreciation_start    DateTime?
  depreciation_end      DateTime?
  depreciation_status   String?
  depreciation_period   Int?
  depreciation_rule     String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime?
  deleted               Boolean   @default(false)
  assetId               Int?      @unique
  accounting_method     String?
  depreciation_lifetime Int?
  remarks               String?
  residual_percentage   Float?
  asset_location        String?
  asset_quantity        Int?
  asset_lifetime        Int?
  asset                 Asset?    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model AssetDisposal {
  id             Int           @id @default(autoincrement())
  disposalDate   DateTime?
  disposalStatus String?
  departmentCode String?
  customerName   String?
  salesAmount    Float?
  salesInvoice   String?
  agreedPrice    Float?
  cufsCodeString String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  deleted        Boolean       @default(false)
  disposalTypeId Int?
  remarks        String?
  telephoneNo    String?
  apInvoice      String?
  disposalPrice  Float?
  assetId        Int?          @unique
  tradedItem     String?
  asset          Asset?        @relation(fields: [assetId], references: [id], onDelete: Cascade)
  disposalType   DisposalType? @relation(fields: [disposalTypeId], references: [id])
}

model AssetRepair {
  id           Int       @id @default(autoincrement())
  description  String?
  assetPart    String?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  deleted      Boolean   @default(false)
  typeId       Int?
  categoryId   Int?
  assetId      Int?      @unique
  repairStatus String?
  remarks      String?
  asset        Asset?    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model DisposalType {
  id        Int             @id @default(autoincrement())
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  deletedAt DateTime?
  deleted   Boolean         @default(false)
  disposal  AssetDisposal[]
}

model Company {
  id           Int          @id @default(autoincrement())
  name         String
  phone_no     String[]
  email        String?
  website      String?
  remarks      String?
  parentId     Int?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  deleted      Boolean      @default(false)
  address      Address?
  assets       Asset[]
  parent       Company?     @relation("subsidiaries", fields: [parentId], references: [id])
  subsidiaries Company[]    @relation("subsidiaries")
  departments  Department[]
}

model Department {
  id         Int       @id @default(autoincrement())
  name       String
  companyId  Int?
  locationId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  deleted    Boolean   @default(false)
  assets     Asset[]
  company    Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  teams      Team[]
}

model Team {
  id              Int         @id @default(autoincrement())
  name            String
  departmentId    Int?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?
  deleted         Boolean     @default(false)
  supervisors     Employee[]  @relation("supervisors")
  members         Employee[]  @relation("members")
  department      Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  Usersupervisors User[]      @relation("Usersupervisors")
  Usermembers     User[]      @relation("Usermembers")
}

model AssetProject {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
  assets    Asset[]
}

model Vendor {
  id        Int       @id @default(autoincrement())
  name      String
  phone_no  String[]
  email     String?
  website   String?
  remarks   String?
  image     String?
  fax_no    String?
  type      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
  address   Address?
  assets    Asset[]
}

model Asset {
  id             Int              @id @default(autoincrement())
  name           String
  number         String           @unique
  alt_number     String?
  serial_no      String?
  barcode        String?
  description    String?
  remarks        String?
  parentId       Int?
  modelId        Int?             @unique
  custodianId    Int?
  vendorId       Int?
  assetProjectId Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  deleted        Boolean          @default(false)
  departmentId   Int?
  subsidiaryId   Int?
  addedById      Int?
  status         String?
  userArchiveId  Int?
  addedBy        User?            @relation(fields: [addedById], references: [id], onDelete: Cascade)
  project        AssetProject?    @relation(fields: [assetProjectId], references: [id])
  custodian      Employee?        @relation(fields: [custodianId], references: [id], onDelete: Cascade)
  department     Department?      @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  model          Model?           @relation(fields: [modelId], references: [id], onDelete: Cascade)
  parent         Asset?           @relation("children", fields: [parentId], references: [id], onDelete: Cascade)
  children       Asset[]          @relation("children")
  subsidiary     Company?         @relation(fields: [subsidiaryId], references: [id], onDelete: Cascade)
  vendor         Vendor?          @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  AssetDisposal  AssetDisposal?
  management     AssetManagement?
  AssetRepair    AssetRepair?

  @@unique([parentId, modelId, custodianId, vendorId, assetProjectId, departmentId, subsidiaryId])
}

model ticketTable {
  id            Int       @id @default(autoincrement())
  action        String?
  createdAt     DateTime  @default(now())
  deleted       Boolean   @default(false)
  deletedAt     DateTime?
  modifiedById  Int?
  newData       String?
  oldData       String?
  tableId       Int?
  tableName     String?
  updatedAt     DateTime  @updatedAt
  userArchiveId Int?
  modifiedBy    User?     @relation(fields: [modifiedById], references: [id], onDelete: Cascade)
}
